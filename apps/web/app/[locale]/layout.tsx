import type { Metadata } from "next";
import localFont from "next/font/local";
import { NextIntlClientProvider } from "next-intl";
import { getMessages } from "next-intl/server";
import { notFound } from "next/navigation";
import { routing } from "@/i18n/routing";
import { Suspense } from "react";

// const geistSans = localFont({
//   src: "../fonts/GeistVF.woff",
//   variable: "--font-geist-sans",
// });
// const geistMono = localFont({
//   src: "../fonts/GeistMonoVF.woff",
//   variable: "--font-geist-mono",
// });
const geistSans = { variable: "--font-geist-sans" };
const geistMono = { variable: "--font-geist-mono" };

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

interface RootLayoutProps {
  children: React.ReactNode;
  params: Promise<{
    locale: string;
  }>;
}

export default async function RootLayout({
  children,
  params: paramsPromise,
}: RootLayoutProps): Promise<React.ReactElement> {
  console.log("root layout");
  // Await params before accessing its properties
  const params = await paramsPromise;
  console.log("root layout", params);
  const { locale } = params;
  console.log("root layout", locale);
  // Validate locale
  if (!routing.locales.includes(locale)) {
    console.log("root layout not found");
    notFound();
  }

  console.log("root layout - getting messages");
  // Load messages for the current locale
  const messages = await getMessages({ locale }).catch((error) => {
    console.log("root layout - error loading messages");
    console.error("Error loading messages:", error);
    return {}; // Fallback to empty messages
  });

  console.log("root layout", messages);

  return (
    <html lang={locale}>
      <body className={`${geistSans.variable} ${geistMono.variable}`}>
        <Suspense fallback={<div>Loading...</div>}>
          <NextIntlClientProvider messages={messages} locale={locale}>
            {children}
          </NextIntlClientProvider>
        </Suspense>
      </body>
    </html>
  );
}

export function generateStaticParams() {
  return routing.locales.map((locale) => ({ locale }));
}
